// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OPM.SFS.Data;

namespace OPM.SFS.Data.Migrations
{
    [DbContext(typeof(ScholarshipForServiceContext))]
    [Migration("20211030025109_Add_PasswordHistory_Tables")]
    partial class Add_PasswordHistory_Tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUser", b =>
                {
                    b.Property<int>("AcademiaUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AcademiaUserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AcademiaUserId");

                    b.ToTable("AcademiaUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUserPasswordHistory", b =>
                {
                    b.Property<int>("AcademiaUserPasswordHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademiaUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademiaUserPasswordHistoryID");

                    b.HasIndex("AcademiaUserID");

                    b.ToTable("AcademiaUserPasswordHistory");
                });

            modelBuilder.Entity("OPM.SFS.Data.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LineOne")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LineTwo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("AddressId");

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("OPM.SFS.Data.AddressAgencyMapping", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.ToTable("AddressAgencyMapping");
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUser", b =>
                {
                    b.Property<int>("AdminUserId")
                        .HasColumnType("int")
                        .HasColumnName("AdminUserID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AdminUserId");

                    b.ToTable("AdminUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUserPasswordHistory", b =>
                {
                    b.Property<int>("AdminUserPasswordHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminUserPasswordHistoryID");

                    b.HasIndex("AdminUserID");

                    b.ToTable("AdminUserPasswordHistory");
                });

            modelBuilder.Entity("OPM.SFS.Data.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("AgencyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyTypeID");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("MigrationId")
                        .HasColumnType("int")
                        .HasColumnName("MigrationID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("ParentAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("ParentAgencyID");

                    b.Property<bool?>("RequirePayPlanSeriesGrade")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequireSmartCardAuth")
                        .HasColumnType("bit");

                    b.HasKey("AgencyId");

                    b.HasIndex("AgencyTypeId");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyType", b =>
                {
                    b.Property<int>("AgencyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("AgencyTypeId");

                    b.ToTable("AgencyType");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUser", b =>
                {
                    b.Property<int>("AgencyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyUserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AgencyUserId");

                    b.ToTable("AgencyUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUserPasswordHistory", b =>
                {
                    b.Property<int>("AgencyUserPasswordHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgencyUserPasswordHistoryID");

                    b.HasIndex("AgencyUserID");

                    b.ToTable("AgencyUserPasswordHistory");
                });

            modelBuilder.Entity("OPM.SFS.Data.ApplicationEventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ApplicationEventLog");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentType", b =>
                {
                    b.Property<int>("CommitmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommitmentTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CommitmentTypeId");

                    b.ToTable("CommitmentType");
                });

            modelBuilder.Entity("OPM.SFS.Data.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneExt")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ContactId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("OPM.SFS.Data.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("OPM.SFS.Data.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DegreeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("DegreeId");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("OPM.SFS.Data.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DisciplineID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DisciplineId");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("OPM.SFS.Data.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("OPM.SFS.Data.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EducationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("CompletionYear")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("CreditType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DegreeId")
                        .HasColumnType("int")
                        .HasColumnName("DegreeID");

                    b.Property<string>("DegreeOther")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gpa")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GPA");

                    b.Property<string>("Gpamax")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GPAMax");

                    b.Property<string>("Honors")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("InstitutionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionTypeID");

                    b.Property<string>("Major")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Minor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("TotalCredits")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("EducationId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("OPM.SFS.Data.Ethnicity", b =>
                {
                    b.Property<int>("EthnicityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EthnicityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EthnicityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EthnicityId");

                    b.ToTable("Ethnicity");
                });

            modelBuilder.Entity("OPM.SFS.Data.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("OPM.SFS.Data.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("HomePage")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("InstitutionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionTypeID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .IsFixedLength(true);

                    b.Property<int?>("ParentInstitutionId")
                        .HasColumnType("int")
                        .HasColumnName("ParentInstitutionID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ProgramPage")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("InstitutionId");

                    b.HasIndex("InstitutionTypeId");

                    b.HasIndex("ParentInstitutionId");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("OPM.SFS.Data.InstitutionType", b =>
                {
                    b.Property<int>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstitutionTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("InstitutionTypeId");

                    b.ToTable("InstitutionType");
                });

            modelBuilder.Entity("OPM.SFS.Data.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("OPM.SFS.Data.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RaceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RaceId");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("OPM.SFS.Data.SalaryType", b =>
                {
                    b.Property<int>("SalaryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalaryTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SalaryTypeId");

                    b.ToTable("SalaryType");
                });

            modelBuilder.Entity("OPM.SFS.Data.SecurityCertification", b =>
                {
                    b.Property<int>("SecurityCertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityCertificationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SecurityCertificationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SecurityCertificationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SecurityCertificationId");

                    b.ToTable("SecurityCertification");
                });

            modelBuilder.Entity("OPM.SFS.Data.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StateId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("OPM.SFS.Data.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("CitizenStatusId")
                        .HasColumnType("int")
                        .HasColumnName("CitizenStatusID");

                    b.Property<int>("CurrentAddressId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentAddressID");

                    b.Property<int?>("DegreeId")
                        .HasColumnType("int")
                        .HasColumnName("DegreeID");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("DisciplineID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("EmergencyContactId")
                        .HasColumnType("int")
                        .HasColumnName("EmergencyContactID");

                    b.Property<string>("EnrolledSession")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EnrolledYear")
                        .HasColumnType("int");

                    b.Property<int?>("EthnicityId")
                        .HasColumnType("int")
                        .HasColumnName("EthnicityID");

                    b.Property<DateTime?>("ExpectedGradDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FailedLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FundingEndSession")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FundingEndYear")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID");

                    b.Property<DateTime?>("InternshipAvailDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MotherMaidenName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("PasswordExpiration")
                        .HasColumnType("date");

                    b.Property<int?>("PermanentAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PermanentAddressID");

                    b.Property<DateTime?>("PostGradAvailDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.Property<string>("UserIp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserIP");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.HasKey("StudentId");

                    b.HasIndex("CurrentAddressId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("EmergencyContactId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PermanentAddressId");

                    b.HasIndex("StatusId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentBuilderResume", b =>
                {
                    b.Property<int>("StudentBuilderResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentBuilderResumeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificate")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("HonorsAwards")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("JobRelatedSkill")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Objective")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OtherQualification")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("Supplemental")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("StudentBuilderResumeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentBuilderResume");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentCommitment", b =>
                {
                    b.Property<int>("StudentCommitmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentCommitmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<int?>("CommitmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CommitmentTypeID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("FinalJobOfferLetterId")
                        .HasColumnType("int")
                        .HasColumnName("FinalJobOfferLetterID");

                    b.Property<string>("Grade")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("JobSearchTypeId")
                        .HasColumnType("int")
                        .HasColumnName("JobSearchTypeID");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Justification")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("MentorContactId")
                        .HasColumnType("int")
                        .HasColumnName("MentorContactID");

                    b.Property<string>("PayPlan")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<int?>("PositionDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PositionDescriptionID");

                    b.Property<decimal?>("SalaryMaximum")
                        .HasColumnType("money");

                    b.Property<decimal?>("SalaryMinimum")
                        .HasColumnType("money");

                    b.Property<int?>("SalaryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SalaryTypeID");

                    b.Property<string>("Series")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int?>("SupervisorContactId")
                        .HasColumnType("int")
                        .HasColumnName("SupervisorContactID");

                    b.Property<int?>("TentativeOfferId")
                        .HasColumnType("int")
                        .HasColumnName("TentativeOfferID");

                    b.HasKey("StudentCommitmentId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CommitmentTypeId");

                    b.HasIndex("FinalJobOfferLetterId");

                    b.HasIndex("MentorContactId");

                    b.HasIndex("PositionDescriptionId");

                    b.HasIndex("SalaryTypeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SupervisorContactId");

                    b.HasIndex("TentativeOfferId");

                    b.ToTable("StudentCommitment");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentDocument", b =>
                {
                    b.Property<int>("StudentDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentDocumentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("StudentDocumentId");

                    b.ToTable("StudentDocument");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentJobActivity", b =>
                {
                    b.Property<int>("StudentJobActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentJobActivityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("CurrentStatus")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("DateApplied")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DutyLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PositionTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<long?>("UsajobscontrolNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("USAJOBSControlNumber");

                    b.HasKey("StudentJobActivityId");

                    b.ToTable("StudentJobActivity");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentPasswordHistory", b =>
                {
                    b.Property<int>("StudentPasswordHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("StudentPasswordHistoryID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentPasswordHistory");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentRace", b =>
                {
                    b.Property<int>("StudentRaceD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RaceId")
                        .HasColumnType("int")
                        .HasColumnName("RaceID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("StudentRaceD");

                    b.HasIndex("RaceId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRace");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentSecurityCertification", b =>
                {
                    b.Property<int>("SecurityCertificationId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityCertificationID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("SecurityCertificationId", "StudentId");

                    b.ToTable("StudentSecurityCertification");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentStatusOption", b =>
                {
                    b.Property<int>("StudentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StatusOption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("StudentStatusId");

                    b.ToTable("StudentStatusOptions");
                });

            modelBuilder.Entity("OPM.SFS.Data.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkExperienceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("Duties")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Employer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Grade")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("HoursPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("PayPlan")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("money");

                    b.Property<string>("Series")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("SupervisorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SupervisorPhone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SupervisorPhoneExt")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("WorkExperienceId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUserPasswordHistory", b =>
                {
                    b.HasOne("OPM.SFS.Data.AcademiaUser", "AcademiaUser")
                        .WithMany("AcademiaUserPasswordHistories")
                        .HasForeignKey("AcademiaUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademiaUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.Address", b =>
                {
                    b.HasOne("OPM.SFS.Data.State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Address_State")
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUserPasswordHistory", b =>
                {
                    b.HasOne("OPM.SFS.Data.AdminUser", "AdminUser")
                        .WithMany("AdminUserPasswordHistories")
                        .HasForeignKey("AdminUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.Agency", b =>
                {
                    b.HasOne("OPM.SFS.Data.AgencyType", "AgencyType")
                        .WithMany("Agencies")
                        .HasForeignKey("AgencyTypeId")
                        .HasConstraintName("FK_Agency_AgencyType");

                    b.Navigation("AgencyType");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUserPasswordHistory", b =>
                {
                    b.HasOne("OPM.SFS.Data.AgencyUser", "AgencyUser")
                        .WithMany("AgencyUserPasswordHistories")
                        .HasForeignKey("AgencyUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgencyUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.Institution", b =>
                {
                    b.HasOne("OPM.SFS.Data.InstitutionType", "InstitutionType")
                        .WithMany("Institutions")
                        .HasForeignKey("InstitutionTypeId")
                        .HasConstraintName("FK_Institution_InstitutionType");

                    b.HasOne("OPM.SFS.Data.Institution", "ParentInstitution")
                        .WithMany("InverseParentInstitution")
                        .HasForeignKey("ParentInstitutionId")
                        .HasConstraintName("FK_Institution_Institution");

                    b.Navigation("InstitutionType");

                    b.Navigation("ParentInstitution");
                });

            modelBuilder.Entity("OPM.SFS.Data.Student", b =>
                {
                    b.HasOne("OPM.SFS.Data.Address", "CurrentAddress")
                        .WithMany("StudentCurrentAddresses")
                        .HasForeignKey("CurrentAddressId")
                        .HasConstraintName("FK_Student_AddressCurrent")
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.Degree", "Degree")
                        .WithMany("Students")
                        .HasForeignKey("DegreeId")
                        .HasConstraintName("FK_Student_Degree");

                    b.HasOne("OPM.SFS.Data.Discipline", "Discipline")
                        .WithMany("Students")
                        .HasForeignKey("DisciplineId")
                        .HasConstraintName("FK_Student_Discipline");

                    b.HasOne("OPM.SFS.Data.Contact", "EmergencyContact")
                        .WithMany("Students")
                        .HasForeignKey("EmergencyContactId")
                        .HasConstraintName("FK_Student_Contact");

                    b.HasOne("OPM.SFS.Data.Ethnicity", "Ethnicity")
                        .WithMany("Students")
                        .HasForeignKey("EthnicityId")
                        .HasConstraintName("FK_Student_Ethnicity");

                    b.HasOne("OPM.SFS.Data.Gender", "Gender")
                        .WithMany("Students")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Student_Gender");

                    b.HasOne("OPM.SFS.Data.Institution", "Institution")
                        .WithMany("Students")
                        .HasForeignKey("InstitutionId")
                        .HasConstraintName("FK_Student_Institution");

                    b.HasOne("OPM.SFS.Data.Address", "PermanentAddress")
                        .WithMany("StudentPermanentAddresses")
                        .HasForeignKey("PermanentAddressId")
                        .HasConstraintName("FK_Student_AddressPerm");

                    b.HasOne("OPM.SFS.Data.StudentStatusOption", "Status")
                        .WithMany("Students")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Student_StudentStatusOptions");

                    b.Navigation("CurrentAddress");

                    b.Navigation("Degree");

                    b.Navigation("Discipline");

                    b.Navigation("EmergencyContact");

                    b.Navigation("Ethnicity");

                    b.Navigation("Gender");

                    b.Navigation("Institution");

                    b.Navigation("PermanentAddress");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentBuilderResume", b =>
                {
                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentBuilderResumes")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentBuilderResume_Student")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentCommitment", b =>
                {
                    b.HasOne("OPM.SFS.Data.Address", "Address")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_StudentCommitment_Address");

                    b.HasOne("OPM.SFS.Data.Agency", "Agency")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_StudentCommitment_Agency");

                    b.HasOne("OPM.SFS.Data.CommitmentType", "CommitmentType")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("CommitmentTypeId")
                        .HasConstraintName("FK_StudentCommitment_CommitmentType");

                    b.HasOne("OPM.SFS.Data.StudentDocument", "FinalJobOfferLetter")
                        .WithMany("StudentCommitmentFinalJobOfferLetters")
                        .HasForeignKey("FinalJobOfferLetterId")
                        .HasConstraintName("FK_StudentCommitment_StudentDocumentFinalOffer");

                    b.HasOne("OPM.SFS.Data.Contact", "MentorContact")
                        .WithMany("StudentCommitmentMentorContacts")
                        .HasForeignKey("MentorContactId")
                        .HasConstraintName("FK_StudentCommitment_ContactMentor");

                    b.HasOne("OPM.SFS.Data.StudentDocument", "PositionDescription")
                        .WithMany("StudentCommitmentPositionDescriptions")
                        .HasForeignKey("PositionDescriptionId")
                        .HasConstraintName("FK_StudentCommitment_StudentDocumentPositionDesc");

                    b.HasOne("OPM.SFS.Data.SalaryType", "SalaryType")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("SalaryTypeId")
                        .HasConstraintName("FK_StudentCommitment_SalaryType");

                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentCommitment_Student")
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.Contact", "SupervisorContact")
                        .WithMany("StudentCommitmentSupervisorContacts")
                        .HasForeignKey("SupervisorContactId")
                        .HasConstraintName("FK_StudentCommitment_ContactSupervisor");

                    b.HasOne("OPM.SFS.Data.StudentDocument", "TentativeOffer")
                        .WithMany("StudentCommitmentTentativeOffers")
                        .HasForeignKey("TentativeOfferId")
                        .HasConstraintName("FK_StudentCommitment_StudentDocumentTenative");

                    b.Navigation("Address");

                    b.Navigation("Agency");

                    b.Navigation("CommitmentType");

                    b.Navigation("FinalJobOfferLetter");

                    b.Navigation("MentorContact");

                    b.Navigation("PositionDescription");

                    b.Navigation("SalaryType");

                    b.Navigation("Student");

                    b.Navigation("SupervisorContact");

                    b.Navigation("TentativeOffer");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentPasswordHistory", b =>
                {
                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentPasswordHistories")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentRace", b =>
                {
                    b.HasOne("OPM.SFS.Data.Race", "Race")
                        .WithMany("StudentRaces")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_StudentRace_Race")
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentRaces")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentRace_Student")
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUser", b =>
                {
                    b.Navigation("AcademiaUserPasswordHistories");
                });

            modelBuilder.Entity("OPM.SFS.Data.Address", b =>
                {
                    b.Navigation("StudentCommitments");

                    b.Navigation("StudentCurrentAddresses");

                    b.Navigation("StudentPermanentAddresses");
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUser", b =>
                {
                    b.Navigation("AdminUserPasswordHistories");
                });

            modelBuilder.Entity("OPM.SFS.Data.Agency", b =>
                {
                    b.Navigation("StudentCommitments");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyType", b =>
                {
                    b.Navigation("Agencies");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUser", b =>
                {
                    b.Navigation("AgencyUserPasswordHistories");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentType", b =>
                {
                    b.Navigation("StudentCommitments");
                });

            modelBuilder.Entity("OPM.SFS.Data.Contact", b =>
                {
                    b.Navigation("StudentCommitmentMentorContacts");

                    b.Navigation("StudentCommitmentSupervisorContacts");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Degree", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Discipline", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Ethnicity", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Gender", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Institution", b =>
                {
                    b.Navigation("InverseParentInstitution");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.InstitutionType", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("OPM.SFS.Data.Race", b =>
                {
                    b.Navigation("StudentRaces");
                });

            modelBuilder.Entity("OPM.SFS.Data.SalaryType", b =>
                {
                    b.Navigation("StudentCommitments");
                });

            modelBuilder.Entity("OPM.SFS.Data.State", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("OPM.SFS.Data.Student", b =>
                {
                    b.Navigation("StudentBuilderResumes");

                    b.Navigation("StudentCommitments");

                    b.Navigation("StudentPasswordHistories");

                    b.Navigation("StudentRaces");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentDocument", b =>
                {
                    b.Navigation("StudentCommitmentFinalJobOfferLetters");

                    b.Navigation("StudentCommitmentPositionDescriptions");

                    b.Navigation("StudentCommitmentTentativeOffers");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentStatusOption", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
