// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OPM.SFS.Data;

#nullable disable

namespace OPM.SFS.Data.Migrations
{
    [DbContext(typeof(ScholarshipForServiceContext))]
    [Migration("20220716022221_CommitmentReject")]
    partial class CommitmentReject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUser", b =>
                {
                    b.Property<int>("AcademiaUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AcademiaUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademiaUserId"), 1L, 1);

                    b.Property<int?>("AcademiaUserRoleID")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FailedLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForcePasswordReset")
                        .HasColumnType("bit");

                    b.Property<int>("InstitutionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PasswordCrypto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfileStatusID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademiaUserId");

                    b.HasIndex("AcademiaUserRoleID");

                    b.HasIndex("AddressId");

                    b.HasIndex("InstitutionID");

                    b.HasIndex("ProfileStatusID");

                    b.ToTable("AcademiaUser", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUserPasswordHistory", b =>
                {
                    b.Property<int>("AcademiaUserPasswordHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademiaUserPasswordHistoryID"), 1L, 1);

                    b.Property<int>("AcademiaUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademiaUserPasswordHistoryID");

                    b.HasIndex("AcademiaUserID");

                    b.ToTable("AcademiaUserPasswordHistory");
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUserRole", b =>
                {
                    b.Property<int>("AcademiaUserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademiaUserRoleID"), 1L, 1);

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademiaUserRoleID");

                    b.ToTable("AcademiaUserRoles");
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademicSchedule", b =>
                {
                    b.Property<int>("AcademicScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicScheduleId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicScheduleId");

                    b.ToTable("AcademicSchedule");
                });

            modelBuilder.Entity("OPM.SFS.Data.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineOne")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LineThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineTwo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("AddressId");

                    b.HasIndex("StateId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AddressAgencyMapping", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.ToTable("AddressAgencyMapping", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUser", b =>
                {
                    b.Property<int>("AdminUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdminUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminUserId"), 1L, 1);

                    b.Property<int?>("AdminUserRoleID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Certificate")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EnforcePIV")
                        .HasColumnType("bit");

                    b.Property<int?>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FailedLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForcePasswordReset")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Issuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PIVOverrideExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordCrypto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ROBExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectAlternative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Thumbprint")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ValidAfter")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("AdminUserId");

                    b.HasIndex("AdminUserRoleID");

                    b.ToTable("AdminUser", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUserPasswordHistory", b =>
                {
                    b.Property<int>("AdminUserPasswordHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminUserPasswordHistoryID"), 1L, 1);

                    b.Property<int>("AdminUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminUserPasswordHistoryID");

                    b.HasIndex("AdminUserID");

                    b.ToTable("AdminUserPasswordHistory");
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUserRole", b =>
                {
                    b.Property<int>("AdminUserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminUserRoleID"), 1L, 1);

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminUserRoleID");

                    b.ToTable("AdminUserRoles");
                });

            modelBuilder.Entity("OPM.SFS.Data.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("AgencyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyTypeID");

                    b.Property<int?>("CommitmentApprovalWorkflowId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("ParentAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("ParentAgencyID");

                    b.Property<bool?>("RequirePayPlanSeriesGrade")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequireSmartCardAuth")
                        .HasColumnType("bit");

                    b.HasKey("AgencyId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyTypeId");

                    b.HasIndex("CommitmentApprovalWorkflowId");

                    b.ToTable("Agency", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyType", b =>
                {
                    b.Property<int>("AgencyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyTypeId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ValidEmailDomain")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgencyTypeId");

                    b.ToTable("AgencyType", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUser", b =>
                {
                    b.Property<int>("AgencyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyUserId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("AgencyID")
                        .HasColumnType("int");

                    b.Property<int?>("AgencyUserRoleID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Certificate")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DisplayContactInfo")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EnforcePIV")
                        .HasColumnType("bit");

                    b.Property<int?>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FailedLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForcePasswordReset")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Issuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PIVOverrideExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PasswordCrypto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfileStatusID")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectAlternative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Thumbprint")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ValidAfter")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgencyUserId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyID");

                    b.HasIndex("AgencyUserRoleID");

                    b.HasIndex("ProfileStatusID");

                    b.ToTable("AgencyUser", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUserPasswordHistory", b =>
                {
                    b.Property<int>("AgencyUserPasswordHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyUserPasswordHistoryID"), 1L, 1);

                    b.Property<int>("AgencyUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgencyUserPasswordHistoryID");

                    b.HasIndex("AgencyUserID");

                    b.ToTable("AgencyUserPasswordHistory");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUserRole", b =>
                {
                    b.Property<int>("AgencyUserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyUserRoleID"), 1L, 1);

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgencyUserRoleID");

                    b.ToTable("AgencyUserRoles");
                });

            modelBuilder.Entity("OPM.SFS.Data.ApplicationEventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ApplicationEventLog", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AuditEventLog", b =>
                {
                    b.Property<int>("AuditEventLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditEventLogID"), 1L, 1);

                    b.Property<string>("LogEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("AuditEventLogID");

                    b.ToTable("AuditEventLog");
                });

            modelBuilder.Entity("OPM.SFS.Data.CertificateStaging", b =>
                {
                    b.Property<Guid>("CertificateStagingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Certificate")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectAlternative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Thumbprint")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ValidAfter")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("CertificateStagingID");

                    b.ToTable("CertificateStaging");
                });

            modelBuilder.Entity("OPM.SFS.Data.Citizenship", b =>
                {
                    b.Property<int>("CitizenshipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitizenshipID"), 1L, 1);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitizenshipID");

                    b.ToTable("Citizenship");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentApprovalWorkflow", b =>
                {
                    b.Property<int>("CommitmentApprovalWorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommitmentApprovalWorkflowId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CommitmentApprovalWorkflowId");

                    b.ToTable("CommitmentApprovalWorkflow");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentStatus", b =>
                {
                    b.Property<int>("CommitmentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommitmentStatusID"), 1L, 1);

                    b.Property<string>("AdminDisplay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("StudentDisplay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommitmentStatusID");

                    b.ToTable("CommitmentStatus");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentStudentDocument", b =>
                {
                    b.Property<int>("CommitmentStudentDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommitmentStudentDocumentID"), 1L, 1);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentCommitmentID")
                        .HasColumnType("int");

                    b.Property<int>("StudentDocumentID")
                        .HasColumnType("int");

                    b.HasKey("CommitmentStudentDocumentID");

                    b.HasIndex("StudentCommitmentID");

                    b.HasIndex("StudentDocumentID");

                    b.ToTable("CommitmentStudentDocument");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentType", b =>
                {
                    b.Property<int>("CommitmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommitmentTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommitmentTypeId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CommitmentTypeId");

                    b.ToTable("CommitmentType", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneExt")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DegreeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DegreeId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("DegreeId");

                    b.ToTable("Degree", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DisciplineID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DisciplineId");

                    b.ToTable("Discipline", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTypeId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EducationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"), 1L, 1);

                    b.Property<string>("CityName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("CompletionYear")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Country");

                    b.Property<string>("CreditType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreditTypeOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Degree");

                    b.Property<string>("DegreeOther")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gpa")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GPA");

                    b.Property<string>("Gpamax")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("GPAMax");

                    b.Property<string>("Honors")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Major")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Minor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.Property<int>("StudentBuilderResumeId")
                        .HasColumnType("int");

                    b.Property<string>("TotalCredits")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("EducationId");

                    b.HasIndex("SchoolTypeID");

                    b.HasIndex("StateId");

                    b.HasIndex("StudentBuilderResumeId");

                    b.ToTable("Education", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.EmailSentLog", b =>
                {
                    b.Property<int>("EmailSentLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailSentLogID"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailSentLogID");

                    b.ToTable("EmailSentLog");
                });

            modelBuilder.Entity("OPM.SFS.Data.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateID"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailTemplateID");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("OPM.SFS.Data.Ethnicity", b =>
                {
                    b.Property<int>("EthnicityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EthnicityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EthnicityId"), 1L, 1);

                    b.Property<string>("EthnicityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EthnicityId");

                    b.ToTable("Ethnicity", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.GlobalConfiguration", b =>
                {
                    b.Property<int>("GlobalConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GlobalConfigurationID"), 1L, 1);

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Value")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("GlobalConfigurationID");

                    b.ToTable("GlobalConfiguration");
                });

            modelBuilder.Entity("OPM.SFS.Data.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionId"), 1L, 1);

                    b.Property<int?>("AcademicScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("GrantExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GrantNumber")
                        .HasColumnType("int");

                    b.Property<string>("HomePage")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("InstitutionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionTypeID");

                    b.Property<bool>("IsAcceptingApplications")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .IsFixedLength();

                    b.Property<int?>("ParentInstitutionID")
                        .HasColumnType("int")
                        .HasColumnName("ParentInstitutionID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ProgramPage")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("InstitutionId");

                    b.HasIndex("AcademicScheduleId");

                    b.HasIndex("InstitutionTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Institution", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.InstitutionContact", b =>
                {
                    b.Property<int>("InstitutionContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionContactId"), 1L, 1);

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionContactTypeID")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstitutionContactId");

                    b.HasIndex("InstitutionContactTypeID");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionContact");
                });

            modelBuilder.Entity("OPM.SFS.Data.InstitutionContactType", b =>
                {
                    b.Property<int>("InstitutionContactTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionContactTypeID"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstitutionContactTypeID");

                    b.ToTable("InstitutionContactType");
                });

            modelBuilder.Entity("OPM.SFS.Data.InstitutionType", b =>
                {
                    b.Property<int>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstitutionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("InstitutionTypeId");

                    b.ToTable("InstitutionType", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.JobActivityStatus", b =>
                {
                    b.Property<int>("JobActivityStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobActivityStatusID"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobActivityStatusID");

                    b.ToTable("JobActivityStatus");
                });

            modelBuilder.Entity("OPM.SFS.Data.JobSearchType", b =>
                {
                    b.Property<int>("JobSearchTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobSearchTypeID"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobSearchTypeID");

                    b.ToTable("JobSearchTypes");
                });

            modelBuilder.Entity("OPM.SFS.Data.ProfileStatus", b =>
                {
                    b.Property<int>("ProfileStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileStatusID"), 1L, 1);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileStatusID");

                    b.ToTable("ProfileStatus");
                });

            modelBuilder.Entity("OPM.SFS.Data.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RaceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"), 1L, 1);

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RaceId");

                    b.ToTable("Race", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.RegistrationCode", b =>
                {
                    b.Property<int>("RegistrationCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationCodeID"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuarterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("QuarterStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RegistrationCodeID");

                    b.ToTable("RegistrationCodes");
                });

            modelBuilder.Entity("OPM.SFS.Data.SalaryType", b =>
                {
                    b.Property<int>("SalaryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalaryTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryTypeId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SalaryTypeId");

                    b.ToTable("SalaryType", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.SchoolType", b =>
                {
                    b.Property<int>("SchoolTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolTypeID"), 1L, 1);

                    b.Property<string>("SchoolTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolTypeID");

                    b.ToTable("SchoolType");
                });

            modelBuilder.Entity("OPM.SFS.Data.SecurityCertification", b =>
                {
                    b.Property<int>("SecurityCertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityCertificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityCertificationId"), 1L, 1);

                    b.Property<string>("SecurityCertificationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SecurityCertificationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SecurityCertificationId");

                    b.ToTable("SecurityCertification", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("DateInserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StateId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.StatusOption", b =>
                {
                    b.Property<int>("StudentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentStatusId"), 1L, 1);

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("StudentStatusId");

                    b.ToTable("StatusOption");
                });

            modelBuilder.Entity("OPM.SFS.Data.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<string>("AlternateEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("CitizenStatusId")
                        .HasColumnType("int")
                        .HasColumnName("CitizenStatusID");

                    b.Property<int?>("CitizenshipID")
                        .HasColumnType("int");

                    b.Property<int?>("CitizenshipOptionID")
                        .HasColumnType("int");

                    b.Property<string>("Contract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrentAddressId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentAddressID");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DegreeId")
                        .HasColumnType("int")
                        .HasColumnName("DegreeID");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("DisciplineID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("EmergencyContactId")
                        .HasColumnType("int")
                        .HasColumnName("EmergencyContactID");

                    b.Property<string>("EnrolledSession")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EnrolledYear")
                        .HasColumnType("int");

                    b.Property<int?>("EthnicityId")
                        .HasColumnType("int")
                        .HasColumnName("EthnicityID");

                    b.Property<DateTime?>("ExpectedGradDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FundingEndSession")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FundingEndYear")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<int?>("HighSchoolStateStateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InitialFundingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID");

                    b.Property<DateTime?>("InternshipAvailDate")
                        .HasMaxLength(10)
                        .HasColumnType("datetime2");

                    b.Property<string>("IsMilitary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MotherMaidenName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermanentAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PermanentAddressID");

                    b.Property<DateTime?>("PostGradAvailDate")
                        .HasMaxLength(10)
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfileStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("StudentUID")
                        .HasColumnType("int");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.Property<string>("UserIp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserIP");

                    b.Property<int?>("YearsInSecurityPosition")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("CitizenshipID");

                    b.HasIndex("CurrentAddressId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("EmergencyContactId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("HighSchoolStateStateId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PermanentAddressId");

                    b.HasIndex("ProfileStatusID");

                    b.HasIndex("SchoolTypeID");

                    b.HasIndex("StatusId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentAccount", b =>
                {
                    b.Property<int>("StudentAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAccountID"), 1L, 1);

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FailedLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ForcePasswordReset")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordCrypto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentAccountID");

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.ToTable("StudentAccount");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentAccountPasswordHistory", b =>
                {
                    b.Property<int>("StudentAccountPasswordHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAccountPasswordHistoryID"), 1L, 1);

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordCrypto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentAccountPasswordHistoryID");

                    b.HasIndex("StudentAccountID");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAccountPasswordHistory");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentBuilderResume", b =>
                {
                    b.Property<int>("StudentBuilderResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentBuilderResumeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentBuilderResumeId"), 1L, 1);

                    b.Property<string>("Certificate")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("HonorsAwards")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("JobRelatedSkill")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Objective")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OtherQualification")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("StudentDocumentID")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("Supplemental")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("StudentBuilderResumeId");

                    b.HasIndex("StudentDocumentID");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentBuilderResume", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentCommitment", b =>
                {
                    b.Property<int>("StudentCommitmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentCommitmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentCommitmentId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<int?>("CommitmentStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("CommitmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CommitmentTypeID");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Grade")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobSearchTypeId")
                        .HasColumnType("int")
                        .HasColumnName("JobSearchTypeID");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Justification")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedByAdminID")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedByPIID")
                        .HasColumnType("int");

                    b.Property<int?>("MentorContactId")
                        .HasColumnType("int")
                        .HasColumnName("MentorContactID");

                    b.Property<string>("PIRecommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPlan")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("RejectNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SalaryMaximum")
                        .HasColumnType("money");

                    b.Property<decimal?>("SalaryMinimum")
                        .HasColumnType("money");

                    b.Property<int?>("SalaryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SalaryTypeID");

                    b.Property<string>("Series")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int?>("SupervisorContactId")
                        .HasColumnType("int")
                        .HasColumnName("SupervisorContactID");

                    b.HasKey("StudentCommitmentId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CommitmentStatusId");

                    b.HasIndex("CommitmentTypeId");

                    b.HasIndex("JobSearchTypeId");

                    b.HasIndex("MentorContactId");

                    b.HasIndex("SalaryTypeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SupervisorContactId");

                    b.ToTable("StudentCommitment", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentDocument", b =>
                {
                    b.Property<int>("StudentDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentDocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentDocumentId"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShareable")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("StudentDocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentDocument", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentJobActivity", b =>
                {
                    b.Property<int>("StudentJobActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentJobActivityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentJobActivityId"), 1L, 1);

                    b.Property<string>("Agency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AgencyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateApplied")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DutyLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("JobActivityStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PositionTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StatusOther")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("UsajobscontrolNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USAJOBSControlNumber");

                    b.HasKey("StudentJobActivityId");

                    b.HasIndex("AgencyTypeId");

                    b.HasIndex("JobActivityStatusID");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentJobActivity", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentRace", b =>
                {
                    b.Property<int>("StudentRaceD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentRaceD"), 1L, 1);

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<int>("RaceId")
                        .HasColumnType("int")
                        .HasColumnName("RaceID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("StudentRaceD");

                    b.HasIndex("RaceId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRace", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentSecurityCertification", b =>
                {
                    b.Property<int>("SecurityCertificationId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityCertificationID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("SecurityCertificationId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSecurityCertification", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkExperienceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkExperienceId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("Duties")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Employer")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("End")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Grade")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("HoursPerWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPlan")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Salary")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Series")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Start")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("StudentBuilderResumeId")
                        .HasColumnType("int");

                    b.Property<string>("SupervisorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SupervisorPhone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SupervisorPhoneExt")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("AddressId");

                    b.HasIndex("StudentBuilderResumeId");

                    b.ToTable("WorkExperience", (string)null);
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUser", b =>
                {
                    b.HasOne("OPM.SFS.Data.AcademiaUserRole", "AcademiaUserRole")
                        .WithMany()
                        .HasForeignKey("AcademiaUserRoleID");

                    b.HasOne("OPM.SFS.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OPM.SFS.Data.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.ProfileStatus", "ProfileStatus")
                        .WithMany()
                        .HasForeignKey("ProfileStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademiaUserRole");

                    b.Navigation("Address");

                    b.Navigation("Institution");

                    b.Navigation("ProfileStatus");
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUserPasswordHistory", b =>
                {
                    b.HasOne("OPM.SFS.Data.AcademiaUser", "AcademiaUser")
                        .WithMany("AcademiaUserPasswordHistories")
                        .HasForeignKey("AcademiaUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademiaUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.Address", b =>
                {
                    b.HasOne("OPM.SFS.Data.State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_State");

                    b.Navigation("State");
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUser", b =>
                {
                    b.HasOne("OPM.SFS.Data.AdminUserRole", "AdminUserRole")
                        .WithMany()
                        .HasForeignKey("AdminUserRoleID");

                    b.Navigation("AdminUserRole");
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUserPasswordHistory", b =>
                {
                    b.HasOne("OPM.SFS.Data.AdminUser", "AdminUser")
                        .WithMany("AdminUserPasswordHistories")
                        .HasForeignKey("AdminUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.Agency", b =>
                {
                    b.HasOne("OPM.SFS.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OPM.SFS.Data.AgencyType", "AgencyType")
                        .WithMany("Agencies")
                        .HasForeignKey("AgencyTypeId")
                        .HasConstraintName("FK_Agency_AgencyType");

                    b.HasOne("OPM.SFS.Data.CommitmentApprovalWorkflow", "CommitmentApprovalWorkflow")
                        .WithMany("Agencies")
                        .HasForeignKey("CommitmentApprovalWorkflowId");

                    b.Navigation("Address");

                    b.Navigation("AgencyType");

                    b.Navigation("CommitmentApprovalWorkflow");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUser", b =>
                {
                    b.HasOne("OPM.SFS.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OPM.SFS.Data.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID");

                    b.HasOne("OPM.SFS.Data.AgencyUserRole", "AgencyUserRole")
                        .WithMany()
                        .HasForeignKey("AgencyUserRoleID");

                    b.HasOne("OPM.SFS.Data.ProfileStatus", "ProfileStatus")
                        .WithMany()
                        .HasForeignKey("ProfileStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Agency");

                    b.Navigation("AgencyUserRole");

                    b.Navigation("ProfileStatus");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUserPasswordHistory", b =>
                {
                    b.HasOne("OPM.SFS.Data.AgencyUser", "AgencyUser")
                        .WithMany("AgencyUserPasswordHistories")
                        .HasForeignKey("AgencyUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgencyUser");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentStudentDocument", b =>
                {
                    b.HasOne("OPM.SFS.Data.StudentCommitment", "StudentCommitment")
                        .WithMany("CommitmentStudentDocuments")
                        .HasForeignKey("StudentCommitmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.StudentDocument", "StudentDocument")
                        .WithMany()
                        .HasForeignKey("StudentDocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentCommitment");

                    b.Navigation("StudentDocument");
                });

            modelBuilder.Entity("OPM.SFS.Data.Education", b =>
                {
                    b.HasOne("OPM.SFS.Data.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeID");

                    b.HasOne("OPM.SFS.Data.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("OPM.SFS.Data.StudentBuilderResume", "StudentBuilderResume")
                        .WithMany("Educations")
                        .HasForeignKey("StudentBuilderResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolType");

                    b.Navigation("State");

                    b.Navigation("StudentBuilderResume");
                });

            modelBuilder.Entity("OPM.SFS.Data.Institution", b =>
                {
                    b.HasOne("OPM.SFS.Data.AcademicSchedule", "AcademicSchedule")
                        .WithMany()
                        .HasForeignKey("AcademicScheduleId");

                    b.HasOne("OPM.SFS.Data.InstitutionType", "InstitutionType")
                        .WithMany("Institutions")
                        .HasForeignKey("InstitutionTypeId")
                        .HasConstraintName("FK_Institution_InstitutionType");

                    b.HasOne("OPM.SFS.Data.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("AcademicSchedule");

                    b.Navigation("InstitutionType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("OPM.SFS.Data.InstitutionContact", b =>
                {
                    b.HasOne("OPM.SFS.Data.InstitutionContactType", "InstitutionContactType")
                        .WithMany("InstitutionContacts")
                        .HasForeignKey("InstitutionContactTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.Institution", null)
                        .WithMany("InstitutionContacts")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstitutionContactType");
                });

            modelBuilder.Entity("OPM.SFS.Data.Student", b =>
                {
                    b.HasOne("OPM.SFS.Data.Citizenship", "Citizenship")
                        .WithMany("Students")
                        .HasForeignKey("CitizenshipID");

                    b.HasOne("OPM.SFS.Data.Address", "CurrentAddress")
                        .WithMany("StudentCurrentAddresses")
                        .HasForeignKey("CurrentAddressId")
                        .HasConstraintName("FK_Student_AddressCurrent");

                    b.HasOne("OPM.SFS.Data.Degree", "Degree")
                        .WithMany("Students")
                        .HasForeignKey("DegreeId")
                        .HasConstraintName("FK_Student_Degree");

                    b.HasOne("OPM.SFS.Data.Discipline", "Discipline")
                        .WithMany("Students")
                        .HasForeignKey("DisciplineId")
                        .HasConstraintName("FK_Student_Discipline");

                    b.HasOne("OPM.SFS.Data.Contact", "EmergencyContact")
                        .WithMany("Students")
                        .HasForeignKey("EmergencyContactId")
                        .HasConstraintName("FK_Student_Contact");

                    b.HasOne("OPM.SFS.Data.Ethnicity", "Ethnicity")
                        .WithMany("Students")
                        .HasForeignKey("EthnicityId")
                        .HasConstraintName("FK_Student_Ethnicity");

                    b.HasOne("OPM.SFS.Data.Gender", "Gender")
                        .WithMany("Students")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Student_Gender");

                    b.HasOne("OPM.SFS.Data.State", "HighSchoolState")
                        .WithMany()
                        .HasForeignKey("HighSchoolStateStateId");

                    b.HasOne("OPM.SFS.Data.Institution", "Institution")
                        .WithMany("Students")
                        .HasForeignKey("InstitutionId")
                        .HasConstraintName("FK_Student_Institution");

                    b.HasOne("OPM.SFS.Data.Address", "PermanentAddress")
                        .WithMany("StudentPermanentAddresses")
                        .HasForeignKey("PermanentAddressId")
                        .HasConstraintName("FK_Student_AddressPerm");

                    b.HasOne("OPM.SFS.Data.ProfileStatus", "ProfileStatus")
                        .WithMany()
                        .HasForeignKey("ProfileStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.SchoolType", "SchoolType")
                        .WithMany("Students")
                        .HasForeignKey("SchoolTypeID");

                    b.HasOne("OPM.SFS.Data.StatusOption", "Status")
                        .WithMany("Students")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Student_StudentStatusOptions");

                    b.Navigation("Citizenship");

                    b.Navigation("CurrentAddress");

                    b.Navigation("Degree");

                    b.Navigation("Discipline");

                    b.Navigation("EmergencyContact");

                    b.Navigation("Ethnicity");

                    b.Navigation("Gender");

                    b.Navigation("HighSchoolState");

                    b.Navigation("Institution");

                    b.Navigation("PermanentAddress");

                    b.Navigation("ProfileStatus");

                    b.Navigation("SchoolType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentAccount", b =>
                {
                    b.HasOne("OPM.SFS.Data.Student", null)
                        .WithOne("StudentAccount")
                        .HasForeignKey("OPM.SFS.Data.StudentAccount", "StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentAccountPasswordHistory", b =>
                {
                    b.HasOne("OPM.SFS.Data.StudentAccount", null)
                        .WithMany("StudentPasswordHistories")
                        .HasForeignKey("StudentAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentBuilderResume", b =>
                {
                    b.HasOne("OPM.SFS.Data.StudentDocument", "StudentDocument")
                        .WithMany("StudentBuilderResumes")
                        .HasForeignKey("StudentDocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentBuilderResumes")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentBuilderResume_Student");

                    b.Navigation("Student");

                    b.Navigation("StudentDocument");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentCommitment", b =>
                {
                    b.HasOne("OPM.SFS.Data.Address", "Address")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_StudentCommitment_Address");

                    b.HasOne("OPM.SFS.Data.Agency", "Agency")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_StudentCommitment_Agency");

                    b.HasOne("OPM.SFS.Data.CommitmentStatus", "CommitmentStatus")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("CommitmentStatusId");

                    b.HasOne("OPM.SFS.Data.CommitmentType", "CommitmentType")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("CommitmentTypeId")
                        .HasConstraintName("FK_StudentCommitment_CommitmentType");

                    b.HasOne("OPM.SFS.Data.JobSearchType", "JobSearchType")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("JobSearchTypeId");

                    b.HasOne("OPM.SFS.Data.Contact", "MentorContact")
                        .WithMany("StudentCommitmentMentorContacts")
                        .HasForeignKey("MentorContactId")
                        .HasConstraintName("FK_StudentCommitment_ContactMentor");

                    b.HasOne("OPM.SFS.Data.SalaryType", "SalaryType")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("SalaryTypeId")
                        .HasConstraintName("FK_StudentCommitment_SalaryType");

                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentCommitments")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentCommitment_Student");

                    b.HasOne("OPM.SFS.Data.Contact", "SupervisorContact")
                        .WithMany("StudentCommitmentSupervisorContacts")
                        .HasForeignKey("SupervisorContactId")
                        .HasConstraintName("FK_StudentCommitment_ContactSupervisor");

                    b.Navigation("Address");

                    b.Navigation("Agency");

                    b.Navigation("CommitmentStatus");

                    b.Navigation("CommitmentType");

                    b.Navigation("JobSearchType");

                    b.Navigation("MentorContact");

                    b.Navigation("SalaryType");

                    b.Navigation("Student");

                    b.Navigation("SupervisorContact");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentDocument", b =>
                {
                    b.HasOne("OPM.SFS.Data.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentDocuments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentJobActivity", b =>
                {
                    b.HasOne("OPM.SFS.Data.AgencyType", "AgencyType")
                        .WithMany()
                        .HasForeignKey("AgencyTypeId");

                    b.HasOne("OPM.SFS.Data.JobActivityStatus", "JobActivityStatus")
                        .WithMany("StudentJobActivities")
                        .HasForeignKey("JobActivityStatusID");

                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentJobActivities")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgencyType");

                    b.Navigation("JobActivityStatus");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentRace", b =>
                {
                    b.HasOne("OPM.SFS.Data.Race", "Race")
                        .WithMany("StudentRaces")
                        .HasForeignKey("RaceId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentRace_Race");

                    b.HasOne("OPM.SFS.Data.Student", "Student")
                        .WithMany("StudentRaces")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentRace_Student");

                    b.Navigation("Race");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentSecurityCertification", b =>
                {
                    b.HasOne("OPM.SFS.Data.Student", null)
                        .WithMany("StudentSecurityCertifications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPM.SFS.Data.WorkExperience", b =>
                {
                    b.HasOne("OPM.SFS.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OPM.SFS.Data.StudentBuilderResume", "StudentBuilderResume")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("StudentBuilderResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("StudentBuilderResume");
                });

            modelBuilder.Entity("OPM.SFS.Data.AcademiaUser", b =>
                {
                    b.Navigation("AcademiaUserPasswordHistories");
                });

            modelBuilder.Entity("OPM.SFS.Data.Address", b =>
                {
                    b.Navigation("StudentCommitments");

                    b.Navigation("StudentCurrentAddresses");

                    b.Navigation("StudentPermanentAddresses");
                });

            modelBuilder.Entity("OPM.SFS.Data.AdminUser", b =>
                {
                    b.Navigation("AdminUserPasswordHistories");
                });

            modelBuilder.Entity("OPM.SFS.Data.Agency", b =>
                {
                    b.Navigation("StudentCommitments");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyType", b =>
                {
                    b.Navigation("Agencies");
                });

            modelBuilder.Entity("OPM.SFS.Data.AgencyUser", b =>
                {
                    b.Navigation("AgencyUserPasswordHistories");
                });

            modelBuilder.Entity("OPM.SFS.Data.Citizenship", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentApprovalWorkflow", b =>
                {
                    b.Navigation("Agencies");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentStatus", b =>
                {
                    b.Navigation("StudentCommitments");
                });

            modelBuilder.Entity("OPM.SFS.Data.CommitmentType", b =>
                {
                    b.Navigation("StudentCommitments");
                });

            modelBuilder.Entity("OPM.SFS.Data.Contact", b =>
                {
                    b.Navigation("StudentCommitmentMentorContacts");

                    b.Navigation("StudentCommitmentSupervisorContacts");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Degree", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Discipline", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Ethnicity", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Gender", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Institution", b =>
                {
                    b.Navigation("InstitutionContacts");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.InstitutionContactType", b =>
                {
                    b.Navigation("InstitutionContacts");
                });

            modelBuilder.Entity("OPM.SFS.Data.InstitutionType", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("OPM.SFS.Data.JobActivityStatus", b =>
                {
                    b.Navigation("StudentJobActivities");
                });

            modelBuilder.Entity("OPM.SFS.Data.JobSearchType", b =>
                {
                    b.Navigation("StudentCommitments");
                });

            modelBuilder.Entity("OPM.SFS.Data.Race", b =>
                {
                    b.Navigation("StudentRaces");
                });

            modelBuilder.Entity("OPM.SFS.Data.SalaryType", b =>
                {
                    b.Navigation("StudentCommitments");
                });

            modelBuilder.Entity("OPM.SFS.Data.SchoolType", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.State", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("OPM.SFS.Data.StatusOption", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("OPM.SFS.Data.Student", b =>
                {
                    b.Navigation("StudentAccount");

                    b.Navigation("StudentBuilderResumes");

                    b.Navigation("StudentCommitments");

                    b.Navigation("StudentDocuments");

                    b.Navigation("StudentJobActivities");

                    b.Navigation("StudentRaces");

                    b.Navigation("StudentSecurityCertifications");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentAccount", b =>
                {
                    b.Navigation("StudentPasswordHistories");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentBuilderResume", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentCommitment", b =>
                {
                    b.Navigation("CommitmentStudentDocuments");
                });

            modelBuilder.Entity("OPM.SFS.Data.StudentDocument", b =>
                {
                    b.Navigation("StudentBuilderResumes");
                });
#pragma warning restore 612, 618
        }
    }
}
