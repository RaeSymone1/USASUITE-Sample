using Medallion.Threading.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using OPM.SFS.Core.Data;
using OPM.SFS.Core.Shared;
using OPM.SFS.Data;
using Sgbj.Cron;

namespace OPM.SFS.TaskProcessor.Tasks
{
    public class CheckMalwareResultsTask : BackgroundService
    {
        public readonly ScholarshipForServiceContext _efDB;
        private readonly IEmailerService _emailer;
        private readonly ILogger _logger;
        private readonly IAzureBlobService _blobService;
        private readonly IConfiguration _appSettings;

        public CheckMalwareResultsTask(IEmailerService emailer, ILogger<SendEmailTask> logger, IServiceProvider serviceProvider, IAzureBlobService blobService, IConfiguration appSettings)
        {
            _emailer = emailer;
            _logger = logger;
            _blobService = blobService;
            _efDB = serviceProvider.CreateScope().ServiceProvider.GetRequiredService<ScholarshipForServiceContext>();
            _appSettings = appSettings;
        }
        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {            
            var task = await _efDB.ScheduledTask.Where(m => m.Name == "CheckMalwareResultsTask").FirstOrDefaultAsync();
            if (!task.IsDisabled)
            {
                using var timer = new CronTimer(task.Schedule, TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time"));
                while (await timer.WaitForNextTickAsync())
                {
                    var @lock = new SqlDistributedLock("CheckMalwareResultsTask", _efDB.Database.GetConnectionString());
                    await using (await @lock.AcquireAsync())
                    {
                        try
                        {
                            _logger.LogInformation("ScheduledTask CheckMalwareResultsTask - Checking for document malware results");
							await SetTaskStateAsync("RUNNING");
							var docsToVerify = _efDB.DocumentScanQueue.ToList();
                            _logger.LogInformation($"ScheduledTask CheckMalwareResultsTask - Found {docsToVerify.Count} to verify");
                            foreach (var doc in docsToVerify)
                            {
                                var results = await _blobService.CheckStorageMalwareTags(doc.FilePath);
                                
                                if (!string.IsNullOrWhiteSpace(results))
                                {
                                    _logger.LogInformation($"ScheduledTask CheckMalwareResultsTask found tags {results} for file {doc.FilePath}");
                                    if (results.Contains("Malware Scanning scan result"))
                                    {
                                        if(results.Contains("No threats found"))
                                        {
                                            _efDB.DocumentScanQueue.Remove(doc);
                                        }
                                        else if (results.Contains("malicious"))
                                        {
                                            await HandleMalicousDocumentAsync(doc);
                                            _efDB.DocumentScanQueue.Remove(doc);
                                        }                                        
                                    }                                  
                                }

                            }
                            await _efDB.SaveChangesAsync();
                            _logger.LogInformation("ScheduledTask CheckMalwareResultsTask completed");
							await SetTaskStateAsync("COMPLETE");
						}
                        catch (Exception ex)
                        {
                            _logger.LogError(ex.ToString());
                        }
                    }

                }
            }
        }

        private async Task HandleMalicousDocumentAsync(DocumentScanQueue docInfo)
        {
            
            //Delete the document from storage
            await _blobService.DeleteDocumentAsync(docInfo.FilePath);
            //Soft delete document
            var docRecord = await _efDB.StudentDocuments.Where(m => m.FilePath == docInfo.FilePath).FirstOrDefaultAsync();

            
            if(docRecord != null)
            {                
                _efDB.StudentDocuments.Remove(docRecord);
               await _efDB.SaveChangesAsync();
            }
            
            AccountData accountToEmail = new();
            if (docInfo.QueuedBy.Contains("ST"))
            {
                //Send email to the Student
                var studentID = Convert.ToInt32(docInfo.QueuedBy.Split("-")[0]);
                var studentInfo = await _efDB.Students.Where(m => m.StudentId == studentID)
               .Select(m => new
               {
                   Email = m.Email,
                   Firstname = m.FirstName
               })
               .FirstOrDefaultAsync();
                SendEmailToUsers(studentInfo.Firstname, studentInfo.Email);
            }
            else if (docInfo.QueuedBy.Contains("AD"))
            {
                //Send email to the admin 
                var adminID = Convert.ToInt32(docInfo.QueuedBy.Split("-")[0]);
                var adminInfo = await _efDB.AdminUsers.Where(m => m.AdminUserId == adminID)
                     .Select(m => new
                     {
                         Email = m.Email,
                         Firstname = m.FirstName
                     }).FirstOrDefaultAsync();

                SendEmailToUsers(adminInfo.Firstname, adminInfo.Email);
            }

        }

        private async Task SendEmailToUsers(string firstname, string email)
        {
            string baseUrl = _appSettings["General:BaseUrl"];
            string emailContent = $@"Hello {firstname}, <br/><br/>
								   There was a problem uploading your document to the <a href = '{baseUrl}'>Cybercorp Scholarship for Service (SFS) website </a>. Please double-check that the document meets these acceptable formats 
                                    and try uploading it again: 
                                    <ul>
                                      <li>Documents must be less than 5MB and one of the following file formats: GIF, JPG, JPEG, PNG, RTF, TXT, PDF or Word (DOC or DOCX).</li>
                                      <li>Documents must not include: 
                                           <ul>
                                                <li>Social Security Number</li>
                                                <li>Photos of yourself </li>
                                                <li>Personal or sensitive information</li>
                                                <li>Classified information</li>
                                           </ul>
                                      </li>                                      
                                    </ul><br/><br/>
                                    If you receive an error message or another email like this one when you try re-uploading, 
                                    please contact the SFS team at <a href='mailto:sfs@opm.gov'>sfs@opm.gov</a> as soon as possible. 
                                    It’s important that we receive your documents in a timely manner, and we’ll be happy to help.
                                    <br/><br/>
                                    Many thanks,";
            await _emailer.SendEmailDefaultTemplateAsync(email, "Action Required: Problem Uploading SFS Document", emailContent);
        }

		private async Task SetTaskStateAsync(string state)
		{
			var task = await _efDB.ScheduledTask.Where(m => m.Name == "CheckMalwareResultsTask").FirstOrDefaultAsync();
			task.LastRunDate = DateTime.UtcNow;
			task.State = state;
			await _efDB.SaveChangesAsync();
		}


		public class AccountData
        {
            public string Email { get; set; }
            public string FirstName { get; set; }
        }
    }

    
}
